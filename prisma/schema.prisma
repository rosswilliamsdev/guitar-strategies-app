// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App-specific relations
  teacherProfile TeacherProfile?
  studentProfile StudentProfile?

  @@index([email])
  @@index([role])
}

model TeacherProfile {
  id              String  @id @default(cuid())
  userId          String  @unique
  calendlyUrl     String? // Teacher's Calendly booking link
  bio             String? @db.Text
  hourlyRate      Int?    // stored in cents
  isActive        Boolean @default(true)
  
  // Payment methods for invoice generation
  venmoHandle     String? // @username
  paypalEmail     String? // email@example.com
  zelleEmail      String? // email@example.com or phone number
  
  // Profile settings
  timezone        String? @default("America/New_York")
  phoneNumber     String?
  profileImageUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  students        StudentProfile[] @relation("TeacherStudents")
  lessons         Lesson[]
  recommendations Recommendation[]
  libraryItems    LibraryItem[]
  invoices        Invoice[]

  @@index([userId])
  @@index([isActive])
}

model StudentProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  teacherId String
  joinedAt  DateTime @default(now())
  
  // Student preferences
  goals             String?    @db.Text
  instrument        String     @default("guitar")
  phoneNumber       String?
  parentEmail       String?    // For minor students
  emergencyContact  String?
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacher  TeacherProfile @relation("TeacherStudents", fields: [teacherId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  invoices Invoice[]

  @@index([userId])
  @@index([teacherId])
  @@index([isActive])
}

model Lesson {
  id              String     @id @default(cuid())
  teacherId       String
  studentId       String
  date            DateTime
  duration        Int        // minutes
  notes           String?    @db.Text
  homework        String?    @db.Text // assignments for next lesson
  progress        String?    @db.Text // skill progression notes
  calendlyEventId String?    // optional link to Calendly event
  status          LessonStatus @default(COMPLETED)
  
  // Lesson details
  focusAreas      String?    @db.Text // JSON array of focus areas
  songsPracticed  String?    @db.Text // JSON array of songs
  nextSteps       String?    @db.Text
  studentRating   Int?       // 1-5 scale, student feedback
  teacherRating   Int?       // 1-5 scale, teacher assessment
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attachments LessonAttachment[]
  links LessonLink[]
  invoiceItems InvoiceItem[]

  @@index([teacherId, date])
  @@index([studentId, date])
  @@index([status])
  @@index([date])
}

model LessonAttachment {
  id          String @id @default(cuid())
  lessonId    String
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  fileUrl     String
  uploadedAt  DateTime @default(now())
  
  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([lessonId])
}

model LessonLink {
  id          String @id @default(cuid())
  lessonId    String
  title       String
  url         String
  description String?
  linkType    LinkType @default(WEBSITE)
  createdAt   DateTime @default(now())
  
  // Relations  
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([lessonId])
}

model LibraryItem {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  fileUrl     String   // Vercel Blob URL
  fileName    String
  fileSize    Int
  teacherId   String
  isPublic    Boolean  @default(false)
  category    LibraryCategory @default(SHEET_MUSIC)
  
  // Metadata
  difficulty  SkillLevel? // Difficulty level if applicable
  tags        String?     // JSON array of tags
  downloadCount Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([isPublic])
  @@index([category])
}

model Recommendation {
  id          String                 @id @default(cuid())
  title       String
  description String                 @db.Text
  link        String?
  category    RecommendationCategory
  teacherId   String
  
  // Additional fields
  price       String?  // e.g., "$299", "Free", "$50-100"
  priority    Int      @default(1) // 1-5, higher = more important
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([category])
}

model Invoice {
  id        String        @id @default(cuid())
  teacherId String
  studentId String
  
  // Invoice details
  invoiceNumber String        // INV-2025-001, etc.
  month         String        // "2025-01" format
  dueDate       DateTime
  status        InvoiceStatus @default(PENDING)
  
  // Totals (calculated from items)
  subtotal      Int           // cents
  total         Int           // cents (same as subtotal for now, room for taxes/fees)
  
  // Payment tracking
  paidAt        DateTime?
  paymentMethod String?       // "Venmo", "PayPal", "Zelle", "Cash", "Check"
  paymentNotes  String?       // Reference number, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student StudentProfile @relation(fields: [studentId], references: [id])
  items   InvoiceItem[]

  @@index([teacherId, month])
  @@index([studentId, month])
  @@index([status])
  @@index([dueDate])
}

model InvoiceItem {
  id          String @id @default(cuid())
  invoiceId   String
  
  // Item details
  description String // "Guitar Lesson - Jan 15, 2025"
  quantity    Int    @default(1)
  rate        Int    // cents (hourly rate)
  amount      Int    // cents (quantity * rate)
  lessonDate  DateTime?
  lessonId    String? // Optional reference to actual lesson
  
  createdAt DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  lesson  Lesson? @relation(fields: [lessonId], references: [id])

  @@index([invoiceId])
  @@index([lessonId])
}

// System models for admin functionality
model SystemSettings {
  id    String @id @default("system")
  
  // Platform settings
  platformFeePercentage   Float   @default(10.0) // Platform fee percentage
  maxFileSize             Int     @default(10485760) // 10MB in bytes
  allowedFileTypes        String  @default("pdf,doc,docx,jpg,png") // comma-separated
  
  // Feature flags
  paymentsEnabled         Boolean @default(true)
  libraryEnabled          Boolean @default(true)
  recommendationsEnabled  Boolean @default(true)
  
  updatedAt DateTime @updatedAt
}

// Enums
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum LessonStatus {
  SCHEDULED   // Future lessons (from Calendly)
  COMPLETED   // Logged by teacher post-lesson
  CANCELLED   // Cancelled/no-show
  MISSED      // Student didn't attend
}

enum RecommendationCategory {
  GEAR
  BOOKS
  SOFTWARE
  ONLINE_COURSES
  APPS
  OTHER
}

enum InvoiceStatus {
  PENDING
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum LibraryCategory {
  TABLATURE
  SHEET_MUSIC
  CHORD_CHARTS
  SCALES
  ETUDES
  EXERCISES
  THEORY
  OTHER
}

enum LinkType {
  WEBSITE
  YOUTUBE
  VIMEO
  SPOTIFY
  OTHER
}