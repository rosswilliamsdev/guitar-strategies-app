// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App-specific relations
  teacherProfile TeacherProfile?
  studentProfile StudentProfile?

  @@index([email])
  @@index([role])
}

model TeacherProfile {
  id              String  @id @default(cuid())
  userId          String  @unique
  bio             String? @db.Text
  hourlyRate      Int?    // stored in cents
  isActive        Boolean @default(true)
  
  // Payment methods for invoice generation
  venmoHandle     String? // @username
  paypalEmail     String? // email@example.com
  zelleEmail      String? // email@example.com or phone number
  
  // Profile settings
  timezone        String  @default("America/New_York") // Teacher's timezone (no longer optional)
  phoneNumber     String?
  profileImageUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  students        StudentProfile[] @relation("TeacherStudents")
  lessons         Lesson[]
  recommendations Recommendation[]
  libraryItems    LibraryItem[]
  invoices        Invoice[]
  curriculums     Curriculum[]
  availability    TeacherAvailability[]
  blockedTimes    TeacherBlockedTime[]
  lessonSettings  TeacherLessonSettings?
  recurringSlots  RecurringSlot[] @relation("TeacherSlots")
  monthlyBilling  MonthlyBilling[] @relation("TeacherBilling")

  @@index([userId])
  @@index([isActive])
}

model StudentProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  teacherId String
  joinedAt  DateTime @default(now())
  
  // Student preferences
  goals             String?    @db.Text
  instrument        String     @default("guitar")
  phoneNumber       String?
  parentEmail       String?    // For minor students
  emergencyContact  String?
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacher  TeacherProfile @relation("TeacherStudents", fields: [teacherId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  invoices Invoice[]
  studentProgress StudentCurriculumProgress[]
  studentChecklists StudentChecklist[]
  recurringSlots RecurringSlot[] @relation("StudentSlots")
  slotSubscriptions SlotSubscription[] @relation("StudentSubscriptions")
  monthlyBilling MonthlyBilling[] @relation("StudentBilling")

  @@index([userId])
  @@index([teacherId])
  @@index([isActive])
}

model Lesson {
  id              String     @id @default(cuid())
  teacherId       String
  studentId       String
  date            DateTime
  duration        Int        // 30 or 60 minutes
  notes           String?    @db.Text
  homework        String?    @db.Text // assignments for next lesson
  progress        String?    @db.Text // skill progression notes
  status          LessonStatus @default(SCHEDULED)
  
  // Scheduling fields
  timezone        String     @default("America/New_York") // Student's timezone for display
  price           Int        @default(0) // Price paid for this lesson (cents)
  isRecurring     Boolean    @default(false)
  recurringId     String?    // Links recurring lessons together
  recurringSlotId String?    // Links to the recurring slot this lesson belongs to
  
  // Lesson details
  focusAreas      String?    @db.Text // JSON array of focus areas
  songsPracticed  String?    @db.Text // JSON array of songs
  nextSteps       String?    @db.Text
  studentRating   Int?       // 1-5 scale, student feedback
  teacherRating   Int?       // 1-5 scale, teacher assessment
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attachments LessonAttachment[]
  links LessonLink[]
  invoiceItems InvoiceItem[]
  recurringSlot RecurringSlot? @relation("SlotLessons", fields: [recurringSlotId], references: [id])

  @@index([teacherId, date])
  @@index([studentId, date])
  @@index([status])
  @@index([date])
  @@index([recurringId])
  @@index([recurringSlotId])
}

model LessonAttachment {
  id          String @id @default(cuid())
  lessonId    String
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  fileUrl     String
  uploadedAt  DateTime @default(now())
  
  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([lessonId])
}

model LessonLink {
  id          String @id @default(cuid())
  lessonId    String
  title       String
  url         String
  description String?
  linkType    LinkType @default(WEBSITE)
  createdAt   DateTime @default(now())
  
  // Relations  
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([lessonId])
}

model LibraryItem {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  fileUrl     String   // Vercel Blob URL
  fileName    String
  fileSize    Int
  teacherId   String
  isPublic    Boolean  @default(false)
  category    LibraryCategory @default(SHEET_MUSIC)
  
  // Metadata
  tags        String?     // JSON array of tags
  downloadCount Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([isPublic])
  @@index([category])
}

model Recommendation {
  id          String                 @id @default(cuid())
  title       String
  description String                 @db.Text
  link        String?
  category    RecommendationCategory
  teacherId   String
  
  // Additional fields
  price       String?  // e.g., "$299", "Free", "$50-100"
  priority    Int      @default(1) // 1-5, higher = more important
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([category])
}

model Invoice {
  id        String        @id @default(cuid())
  teacherId String
  studentId String
  
  // Invoice details
  invoiceNumber String        // INV-2025-001, etc.
  month         String        // "2025-01" format
  dueDate       DateTime
  status        InvoiceStatus @default(PENDING)
  
  // Totals (calculated from items)
  subtotal      Int           // cents
  total         Int           // cents (same as subtotal for now, room for taxes/fees)
  
  // Payment tracking
  paidAt        DateTime?
  paymentMethod String?       // "Venmo", "PayPal", "Zelle", "Cash", "Check"
  paymentNotes  String?       // Reference number, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student StudentProfile @relation(fields: [studentId], references: [id])
  items   InvoiceItem[]

  @@index([teacherId, month])
  @@index([studentId, month])
  @@index([status])
  @@index([dueDate])
}

model InvoiceItem {
  id          String @id @default(cuid())
  invoiceId   String
  
  // Item details
  description String // "Guitar Lesson - Jan 15, 2025"
  quantity    Int    @default(1)
  rate        Int    // cents (hourly rate)
  amount      Int    // cents (quantity * rate)
  lessonDate  DateTime?
  lessonId    String? // Optional reference to actual lesson
  
  createdAt DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  lesson  Lesson? @relation(fields: [lessonId], references: [id])

  @@index([invoiceId])
  @@index([lessonId])
}

// Curriculum models
model Curriculum {
  id          String   @id @default(cuid())
  teacherId   String
  title       String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teacher     TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  sections    CurriculumSection[]
  studentProgress StudentCurriculumProgress[]
  
  @@index([teacherId])
  @@index([isPublished])
}

model CurriculumSection {
  id           String   @id @default(cuid())
  curriculumId String
  title        String
  description  String?  @db.Text
  category     CurriculumCategory
  sortOrder    Int      @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  items        CurriculumItem[]
  
  @@index([curriculumId])
  @@index([sortOrder])
}

model CurriculumItem {
  id          String   @id @default(cuid())
  sectionId   String
  title       String
  description String?  @db.Text
  sortOrder   Int      @default(0)
  
  // Optional metadata
  difficulty  Int?     // 1-10 scale within the curriculum level
  estimatedMinutes Int? // Estimated time to complete
  resourceUrl String?  // Link to sheet music, video, etc.
  notes       String?  @db.Text // Teacher notes about this item
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  section     CurriculumSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress    StudentItemProgress[]
  
  @@index([sectionId])
  @@index([sortOrder])
}

model StudentCurriculumProgress {
  id           String   @id @default(cuid())
  studentId    String
  curriculumId String
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  
  // Progress tracking
  totalItems      Int @default(0)
  completedItems  Int @default(0)
  progressPercent Float @default(0)
  
  updatedAt    DateTime @updatedAt
  
  // Relations
  student      StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  itemProgress StudentItemProgress[]
  
  @@unique([studentId, curriculumId])
  @@index([studentId])
  @@index([curriculumId])
}

model StudentItemProgress {
  id                 String   @id @default(cuid())
  curriculumProgressId String
  itemId             String
  
  status             ProgressStatus @default(NOT_STARTED)
  startedAt          DateTime?
  completedAt        DateTime?
  teacherNotes       String?  @db.Text
  studentNotes       String?  @db.Text
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  curriculumProgress StudentCurriculumProgress @relation(fields: [curriculumProgressId], references: [id], onDelete: Cascade)
  item               CurriculumItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([curriculumProgressId, itemId])
  @@index([curriculumProgressId])
  @@index([itemId])
  @@index([status])
}

// Student Personal Checklist models
model StudentChecklist {
  id          String   @id @default(cuid())
  studentId   String
  title       String
  
  // Checklist metadata
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  student     StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  items       StudentChecklistItem[]
  
  @@index([studentId])
  @@index([isActive])
}

model StudentChecklistItem {
  id          String   @id @default(cuid())
  checklistId String
  title       String
  description String?  @db.Text
  
  // Item tracking
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  
  // Optional metadata
  notes       String?  @db.Text
  resourceUrl String?  // Link to sheet music, video, etc.
  estimatedMinutes Int? // Estimated time to complete
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  checklist   StudentChecklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  
  @@index([checklistId])
  @@index([isCompleted])
}

// Teacher Scheduling Models
model TeacherLessonSettings {
  id                 String @id @default(cuid())
  teacherId          String @unique
  allows30Min        Boolean @default(true)
  allows60Min        Boolean @default(true)
  price30Min         Int     // cents
  price60Min         Int     // cents
  advanceBookingDays Int     @default(21) // 3 weeks
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  @@index([teacherId])
}

model TeacherAvailability {
  id        String  @id @default(cuid())
  teacherId String
  dayOfWeek Int     // 0-6 (Sunday-Saturday)
  startTime String  // "09:00" in teacher's timezone
  endTime   String  // "17:00" in teacher's timezone
  isActive  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  @@unique([teacherId, dayOfWeek, startTime, endTime])
  @@index([teacherId])
  @@index([dayOfWeek])
}

model TeacherBlockedTime {
  id        String   @id @default(cuid())
  teacherId String
  startTime DateTime // UTC
  endTime   DateTime // UTC
  reason    String?  // "vacation", "personal", etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  @@index([teacherId])
  @@index([startTime, endTime])
}

// Recurring Monthly Slot System Models
model RecurringSlot {
  id          String   @id @default(cuid())
  teacherId   String
  studentId   String
  
  // Slot timing
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // "09:00" in teacher's timezone
  duration    Int      // 30 or 60 minutes
  
  // Slot status and lifecycle
  status      SlotStatus @default(ACTIVE)
  bookedAt    DateTime @default(now())
  cancelledAt DateTime?
  
  // Pricing
  perLessonPrice Int   // cents - price per individual lesson
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teacher     TeacherProfile @relation("TeacherSlots", fields: [teacherId], references: [id], onDelete: Cascade)
  student     StudentProfile @relation("StudentSlots", fields: [studentId], references: [id], onDelete: Cascade)
  lessons     Lesson[]       @relation("SlotLessons")
  subscriptions SlotSubscription[]
  
  @@unique([teacherId, dayOfWeek, startTime, duration, status]) // Prevent double-booking
  @@index([teacherId, status])
  @@index([studentId, status])
  @@index([dayOfWeek])
}

model SlotSubscription {
  id            String   @id @default(cuid())
  slotId        String
  studentId     String
  
  // Subscription period
  startMonth    String   // "2025-01" format
  endMonth      String?  // null = ongoing, "2025-12" = specific end
  
  // Billing details
  monthlyRate   Int      // cents - locked rate for this subscription
  status        SubscriptionStatus @default(ACTIVE)
  
  // Payment tracking
  lastBilledMonth String? // "2025-01" - last month that was billed
  nextBillDate    DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  slot          RecurringSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  student       StudentProfile @relation("StudentSubscriptions", fields: [studentId], references: [id], onDelete: Cascade)
  billingRecords MonthlyBilling[]
  
  @@unique([slotId, studentId, startMonth]) // One subscription per slot per student per start month
  @@index([status])
  @@index([nextBillDate])
  @@index([studentId])
}

model MonthlyBilling {
  id               String   @id @default(cuid())
  subscriptionId   String
  studentId        String
  teacherId        String
  
  // Billing period
  month            String   // "2025-01" format
  
  // Lesson count and pricing
  expectedLessons  Int      // How many lessons should occur this month
  actualLessons    Int      @default(0) // How many actually happened
  ratePerLesson    Int      // cents - calculated from monthly rate
  totalAmount      Int      // cents - expectedLessons * ratePerLesson
  
  // Billing status
  status           BillingStatus @default(PENDING)
  billedAt         DateTime?
  paidAt           DateTime?
  paymentMethod    String?  // "Venmo", "PayPal", "Zelle", etc.
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  subscription     SlotSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  student          StudentProfile @relation("StudentBilling", fields: [studentId], references: [id])
  teacher          TeacherProfile @relation("TeacherBilling", fields: [teacherId], references: [id])
  
  @@unique([subscriptionId, month]) // One billing record per subscription per month
  @@index([month])
  @@index([status])
  @@index([studentId, month])
  @@index([teacherId, month])
}

// System models for admin functionality
model SystemSettings {
  id    String @id @default("system")
  
  // Platform settings
  platformFeePercentage   Float   @default(10.0) // Platform fee percentage
  maxFileSize             Int     @default(10485760) // 10MB in bytes
  allowedFileTypes        String  @default("pdf,doc,docx,jpg,png") // comma-separated
  
  // Feature flags
  paymentsEnabled         Boolean @default(true)
  libraryEnabled          Boolean @default(true)
  recommendationsEnabled  Boolean @default(true)
  
  updatedAt DateTime @updatedAt
}

// Enums
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum LessonStatus {
  SCHEDULED   // Future lesson
  COMPLETED   // Teacher logged completion
  CANCELLED   // Cancelled by student or teacher
  NO_SHOW     // Student didn't attend
  MISSED      // Student didn't attend but not marked no-show
}

enum RecommendationCategory {
  GEAR
  BOOKS
  SOFTWARE
  ONLINE_COURSES
  APPS
  OTHER
}

enum InvoiceStatus {
  PENDING
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum LibraryCategory {
  TABLATURE
  SHEET_MUSIC
  CHORD_CHARTS
  SCALES
  ETUDES
  EXERCISES
  THEORY
  OTHER
}

enum LinkType {
  WEBSITE
  YOUTUBE
  VIMEO
  SPOTIFY
  OTHER
}

enum CurriculumCategory {
  CHORDS
  SCALES
  ARPEGGIOS
  THEORY
  RHYTHM
  LEAD_GUITAR
  FINGERSTYLE
  SONGS
  RIFFS
  SOLOS
  TECHNIQUE
  SIGHT_READING
  EAR_TRAINING
  IMPROVISATION
  OTHER
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  NEEDS_REVIEW
}

enum SlotStatus {
  ACTIVE      // Slot is currently active and generating lessons
  CANCELLED   // Student cancelled their recurring slot
  SUSPENDED   // Temporarily paused (vacation, etc.)
  EXPIRED     // Slot ended naturally
}

enum SubscriptionStatus {
  ACTIVE      // Subscription is active and billing
  PAUSED      // Temporarily paused
  CANCELLED   // Cancelled by student
  EXPIRED     // Subscription period ended
}

enum BillingStatus {
  PENDING     // Not yet billed
  BILLED      // Invoice sent to student
  PAID        // Student has paid
  OVERDUE     // Payment past due
  CANCELLED   // Billing cancelled
}

// Background job logging for monitoring automatic lesson generation
model BackgroundJobLog {
  id                String   @id @default(cuid())
  jobName           String   // e.g., "generate-future-lessons"
  executedAt        DateTime @default(now())
  success           Boolean
  lessonsGenerated  Int      @default(0)
  teachersProcessed Int      @default(0)
  errors            String?  @db.Text // Concatenated error messages
  
  @@index([jobName, executedAt])
}

